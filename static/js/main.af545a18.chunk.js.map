{"version":3,"sources":["Helpers/api.ts","Components/UserCard/UserCard.tsx","Components/CommentCard/CommentCard.tsx","Components/CommentList/CommentList.tsx","Components/PostCard/PostCard.tsx","Components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["getAll","URL","a","fetch","then","response","json","UserCard","user","name","email","address","street","suite","city","zipcode","className","CommentCard","comment","body","CommentList","comments","map","key","id","PostCard","post","title","PostList","posts","emptyUser","username","App","useState","setPosts","input","setInput","isLoaded","setIsLoaded","loading","setLoading","loadPosts","postsFromServer","usersFromServer","commentsFromServer","preparedPosts","find","userId","filter","postId","visiblePosts","toLowerCase","includes","event","preventDefault","console","log","target","value","handleInput","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af545a18.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = async <T>(URL: string): Promise<T[]> => {\n  return fetch(API_URL + URL)\n    .then(response => response.json());\n}\n\nexport const getPosts = (): Promise<Post[]> => getAll('/posts.json');\nexport const getUsers = (): Promise<User[]> => getAll('/users.json');\nexport const getComments = (): Promise<Comment[]> => getAll('/comments.json');\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n}\n\nexport interface User {\n  id: number | null;\n  name: string;\n  username: string;\n  email: string;\n  address: Address;\n}\n\ninterface Address {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: number | null;\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}","import React from 'react';\nimport { User } from '../../Helpers/api';\nimport './UserCard.css';\n\ntype Props = {\n  user: User,\n}\n\nexport const UserCard: React.FC<Props> = ({ user: { name, email, address }}) => {\n  const { street, suite, city, zipcode } = address;\n\n  return (\n    <div className=\"post__user\">\n      <div className=\"post__user-name\">\n        <p>{name}</p>\n        <p>{email}</p>\n      </div>\n      <div className=\"post__user-address\">\n        <p>{street}</p>\n        <p>{suite}</p>\n        <p>{city}</p>\n        <p>{zipcode}</p>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport './CommentCard.css';\n\ntype CommentValues = {\n  name: string;\n  body: string;\n  email: string;\n}\n\ntype Props = {\n  comment: CommentValues,\n}\n\nexport const CommentCard: React.FC<Props> = ({ comment: { name, body, email }}) => {\n  return (\n    <li className=\"comment\">\n    <div className=\"comment__contacts\">\n      <p>{name}</p>\n      <p>{email}</p>\n    </div>\n    <p>{body}</p>\n  </li>\n  );\n}","import React from 'react';\nimport { CommentCard } from '../CommentCard/CommentCard';\nimport { Comment } from '../../Helpers/api';\nimport './CommentList.css';\n\ntype Props = {\n  comments?: Comment[],\n}\n\nexport const CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <div className=\"comments__list\">\n      <h2 className=\"comments__p\">Comments:</h2>\n      <ul>\n        {comments!.map((comment: Comment) => (\n          <CommentCard comment={comment} key={comment.id} />\n        ))}\n      </ul>\n    </div>\n  );\n}","import React from 'react';\nimport { Post } from '../../Helpers/api';\nimport { UserCard } from '../UserCard/UserCard';\nimport { CommentList } from '../CommentList/CommentList';\nimport './PostCard.css';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostCard: React.FC<Props> = ({ post }) => {\n  return (\n    <div className=\"post\">\n    <h1 className=\"post__title\">{post.title}</h1>\n\n    <div className=\"post__body\">\n      <p>&emsp;&emsp;{post.body}</p>\n    </div>\n\n    <UserCard user={post.user} />\n    <CommentList comments={post.comments} />\n  </div>\n  );\n};","import React from 'react';\nimport { PostCard } from '../PostCard/PostCard';\nimport { Post } from '../../Helpers/api';\nimport './PostList.css';\n\ntype Props = {\n  posts: Post[],\n}\n\nexport const PostList: React.FC<Props> = ({ posts }) => {\n  return (\n    <div className=\"post__list\">\n      {posts.map(post => (\n        <PostCard post={post} key={post.id} />\n      ))}\n    </div>\n  );\n};","import React, { useState, ChangeEvent } from 'react';\nimport './App.css';\nimport {\n  getPosts, getUsers, getComments, Post\n} from './Helpers/api';\nimport { PostList } from './Components/PostList/PostList';\n\nconst emptyUser = {\n  id: null,\n  name: '',\n  username: '',\n  email: '',\n  address: {\n    street: '',\n    suite: '',\n    city: '',\n    zipcode: null,\n  },\n};\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const loadPosts = async () => {\n    setLoading(true);\n\n    const postsFromServer = await getPosts();\n    const usersFromServer = await getUsers();\n    const commentsFromServer = await getComments();\n\n    const preparedPosts = postsFromServer.map(post => ({\n      ...post,\n      user: usersFromServer.find(user => user.id === post.userId) || emptyUser,\n      comments: commentsFromServer.filter(comment => comment.postId === post.userId),\n    }));\n\n    setPosts(preparedPosts);\n    setIsLoaded(true);\n  }\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement>â€©) => {\n    event.preventDefault();\n\n    console.log(event.target.value);\n    setInput(event.target.value);\n  }\n\n  const visiblePosts = [...posts].filter(post => (\n    post.title.toLowerCase()\n      .includes(input.toLowerCase())\n  ));\n\n  return (\n    <>\n      {!isLoaded ? (\n          <button type=\"button\" onClick={loadPosts} disabled={loading}>\n            {!loading ? 'Load' : 'Loading'}\n          </button>\n      ) : (\n      <>\n        <input type=\"text\" value={input} onChange={(event) => handleInput(event)} />\n        <PostList posts={visiblePosts} />\n      </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}