{"version":3,"sources":["Helpers/api.ts","Components/UserCard/UserCard.tsx","Components/CommentCard/CommentCard.tsx","Components/CommentList/CommentList.tsx","Components/PostCard/PostCard.tsx","Components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["getAll","URL","a","fetch","then","response","json","UserCard","user","name","email","address","street","suite","city","zipcode","className","CommentCard","comment","body","CommentList","comments","map","key","id","PostCard","post","title","PostList","posts","App","useState","setPosts","input","setInput","isLoaded","setIsLoaded","loading","setLoading","isError","setIsError","loadPosts","postsFromServer","usersFromServer","commentsFromServer","preparedPosts","find","userId","filter","postId","visiblePosts","useMemo","toLowerCase","includes","type","value","onChange","event","preventDefault","target","handleInput","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd2687a1.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = async <T>(URL: string): Promise<T[]> => {\n  return fetch(API_URL + URL)\n    .then(response => response.json());\n};\n\nexport const getPosts = (): Promise<Post[]> => getAll('/posts.json');\nexport const getUsers = (): Promise<User[]> => getAll('/users.json');\nexport const getComments = (): Promise<Comment[]> => getAll('/comments.json');\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user?: User;\n  comments: Comment[];\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: Address;\n}\n\nexport interface Address {\n  street: string;\n  suite: string;\n  city: string;\n  zipcode: number;\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n","import React from 'react';\nimport { User } from '../../Helpers/api';\nimport './UserCard.css';\n\ntype Props = {\n  user?: User;\n};\n\nexport const UserCard: React.FC<Props> = ({ user }) => {\n  const name = user?.name;\n  const email = user?.email;\n  const address = user?.address;\n\n  const street = address?.street;\n  const suite = address?.suite;\n  const city = address?.city;\n  const zipcode = address?.zipcode;\n\n  return (\n    <div className=\"post__user\">\n      <div className=\"post__user-name\">\n        <p>{name}</p>\n        <p>{email}</p>\n      </div>\n      <div className=\"post__user-address\">\n        <p>{street}</p>\n        <p>{suite}</p>\n        <p>{city}</p>\n        <p>{zipcode}</p>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CommentCard.css';\n\ntype CommentValues = {\n  name: string;\n  body: string;\n  email: string;\n};\n\ntype Props = {\n  comment: CommentValues;\n};\n\nexport const CommentCard: React.FC<Props> = ({ comment: { name, body, email } }) => {\n  return (\n    <li className=\"comment\">\n      <div className=\"comment__contacts\">\n        <p>{name}</p>\n        <p>{email}</p>\n      </div>\n      <p>{body}</p>\n    </li>\n  );\n};\n","import React from 'react';\nimport { CommentCard } from '../CommentCard/CommentCard';\nimport { Comment } from '../../Helpers/api';\nimport './CommentList.css';\n\ntype Props = {\n  comments?: Comment[];\n};\n\nexport const CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <div className=\"comments__list\">\n      <h2 className=\"comments__p\">Comments:</h2>\n      <ul>\n        {comments?.map((comment: Comment) => (\n          <CommentCard comment={comment} key={comment.id} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\nimport { Post } from '../../Helpers/api';\nimport { UserCard } from '../UserCard/UserCard';\nimport { CommentList } from '../CommentList/CommentList';\nimport './PostCard.css';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostCard: React.FC<Props> = ({ post }) => {\n  return (\n    <div className=\"post\">\n      <h1 className=\"post__title\">{post.title}</h1>\n\n      <div className=\"post__body\">\n        <p>&emsp;&emsp;{post.body}</p>\n      </div>\n\n      <UserCard user={post.user} />\n      <CommentList comments={post.comments} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { PostCard } from '../PostCard/PostCard';\nimport { Post } from '../../Helpers/api';\nimport './PostList.css';\n\ntype Props = {\n  posts: Post[];\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => {\n  return (\n    <div className=\"post__list\">\n      {posts.map(post => (\n        <PostCard post={post} key={post.id} />\n      ))}\n    </div>\n  );\n};\n","import React, { useState, ChangeEvent, useMemo } from 'react';\nimport './App.css';\nimport {\n  getPosts, getUsers, getComments, Post,\n} from './Helpers/api';\nimport { PostList } from './Components/PostList/PostList';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const loadPosts = async () => {\n    setLoading(true);\n\n    try {\n      const postsFromServer = await getPosts();\n      const usersFromServer = await getUsers();\n      const commentsFromServer = await getComments();\n\n      const preparedPosts = postsFromServer.map(post => ({\n        ...post,\n        user: usersFromServer.find(user => user.id === post.userId),\n        comments: commentsFromServer.filter(comment => comment.postId === post.userId),\n      }));\n\n      setPosts(preparedPosts);\n      setIsLoaded(true);\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    const { value } = event.target;\n\n    setInput(value);\n  };\n\n  const visiblePosts = useMemo(\n    () => {\n      return [...posts].filter(post => (\n        post.title.toLowerCase().includes(input.toLowerCase())));\n    }, [posts, input],\n  );\n\n  return (\n    <>\n      {!isLoaded ? (\n        <>\n          <button type=\"button\" onClick={loadPosts} disabled={loading}>\n            {!loading ? 'Load' : 'Loading'}\n          </button>\n          <p>{isError && 'Please reload the page'}</p>\n        </>\n      ) : (\n        <>\n          <input type=\"text\" value={input} onChange={(event) => handleInput(event)} />\n          <PostList posts={visiblePosts} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}